
#include <stdio.h>
#include <math.h>

#define N 100000
int row[] = { 2, 2, -2, -2, 1, 1, -1, -1 };
int col[] = { -1, 1, 1, -1, 2, -2, 2, -2 };

//int row[] = { 4, 4, -4, -4, 10, 10, -10, -10 };
//int col[] = { -10, 10, 10, -10, 4, -4, 4, -4 };

//// Test Output of chess path finder

//int array[N][N];
//
//void fillTest(){
//    for(int i = 0; i < N; i++){
//        for(int j = 0; j < N; j++){
//            array[i][j] = 0;
//        }
//    }
//}
//
//void printTest(){
//    for(int i = 0; i < N; i++){
//        for(int j = 0; j < N; j++){
//            printf(" %d ",array[i][j]);
//        }
//        printf("\n");
//    }
//}
//
//void fillPoint(int x, int y, int fill){
//    array [x][y] = fill;
//}

//============================================================================================//

////coordinate visit checking lnklst

struct coordinate{
    int x;
    int y;
    struct coordinates *next;
}*head = NULL;

void insertVisitCoord(int x, int y){
    struct coordinate *newNode = (struct coordinate*) malloc(sizeof(struct coordinate));
    newNode->x = x;
    newNode->y = y;
    newNode->next = NULL;

    if(newNode == NULL)
        printf("\nMemory for coord not allocated\n");

    if(head == NULL) {
        head = newNode;
    } else {
        newNode->next = head;
        head = newNode;
    }
}
int isVisited(int x, int y){
    if(head == NULL)
        return 0;
    else {
        struct coordinate *temp = head;
        while(temp -> x != x && temp -> y != y && temp -> next != NULL) {
            temp = temp->next;
        }
        //if we found the node that has data1 == key
        if(temp -> x == x && temp -> y == y){
            return 1;
        }
        return 0;
    }
}


//==================================================================================================//


////Queue BFT to find shortest path

struct node{
    int distance, x, y;
    struct node *next;
}*front = NULL, *rear = NULL;

void insertMove(int x, int y, int dist){
    struct node *new;
    new = malloc(sizeof(struct node));
    new -> x = x;
    new -> y = y;
    new -> distance = dist;
    new -> next = NULL;
    if (front == NULL){
        front = new;
        rear = new;
    } else {
        rear -> next = new;
        rear = new;
    }
    printf("\n Move inserted \n");
}

void deleteMove(){
    if (front == NULL){
        printf("\nqueue is empty\n");
    } else {
        struct node *temp = front;
        front = front -> next;
        free(temp);
        printf("\nmove removed\n");
    }
}

int checkValidMove(int x, int y, int dim){
    return (x >= 0 && x <= dim) && (y >= 0 && y <= dim);
}

float checkDistance(int currX, int currY, int finishX, int finishY){
    return sqrt((pow(finishX-currX,2))+ (pow(finishY-currY,2)));
}

//============================================================================================//


//// find Best N moves
# define numMoves 1

typedef struct Moves{
    int x;
    int y;
    float distance;
}nodeMove;

nodeMove arrayOfMoves[numMoves];

void initBlankmoves(){
    for (int i = 0; i < numMoves; i++){
        arrayOfMoves[i].distance = 0;
    }
}

void printBestMove(){
    for (int i = 0; i < numMoves; i++){
        printf("\n|| x:%d || y:%d || distance:%f\n", arrayOfMoves[i].x , arrayOfMoves[i].y , arrayOfMoves[i].distance);
    }
}

void findBestMoves(int x, int y,int finishX,int finishY){
    for (int i = 0; i < 8; i ++){
        int tempX = x + row[i];
        int tempY = y + col[i];
        float strDist = checkDistance(tempX,tempY,finishX,finishY);
        int tempInserted = 0;
        for (int j = 0; j < numMoves; j++){
            if (arrayOfMoves[j].distance == 0 && !tempInserted){
                arrayOfMoves[j].x = tempX;
                arrayOfMoves[j].y = tempY;
                arrayOfMoves[j].distance = strDist;
                tempInserted = 1;
            } else{
                if (strDist < arrayOfMoves[j].distance && !tempInserted){
                    arrayOfMoves[j].x = tempX;
                    arrayOfMoves[j].y = tempY;
                    arrayOfMoves[j].distance = strDist;
                    tempInserted = 1;
                }
            }
        }
    }
}


//================================================================================//

////BFS used to find shortest path

int stepsNeeded(int startX, int startY, int finishX, int finishY, int dim){
    int distanceInitial = 0;
    insertMove(startX,startY,distanceInitial);

    while (front != NULL){
        struct node *temp = front;
        int x = temp -> x;
        int y = temp -> y;
        int dist = temp -> distance;

        deleteMove();

        //fillPoint(x,y,dist+1);
        //printTest();

        float strLineDis = checkDistance(x,y,finishX,finishY);

        if (x == finishX && y == finishY){
            return dist;
        }
        if (!isVisited(x,y)){
            insertVisitCoord(x,y);
            initBlankmoves();
            findBestMoves(x, y, finishX, finishY);
            printBestMove();
            for (int i = 0; i < 8; i ++){
                int tempX = x + row[i];
                int tempY = y + col[i];

                if(checkValidMove(tempX, tempY, dim)){
                    if(checkDistance(tempX,tempY,finishX,finishY) > 5){
                        //take the best three(strline distance)
                        for (int j = 0; j < numMoves; j++){
                            if(tempX == arrayOfMoves[j].x && tempY ==arrayOfMoves[j].y)
                                insertMove(tempX, tempY, dist + 1);
                        }
                    } else {
                        //allow variation in move direction
                        insertMove(tempX, tempY, dist + 1);
                    }
                }
            }
        }
    }
    return 0;
}

int main()
{
    //fillTest();
    int startX = 92048;
    int startY = 32051;
    int finishX = 0;
    int finishY = 738;
    int dim = N;
    printf("\n%d", stepsNeeded(startX, startY, finishX, finishY, dim));
}
